import com.yandex.div.gradle.FileExtensions

apply from: "$projectDir/version.gradle"

ext {
    minSdkVersion = 21
    compileSdkVersion = 34
    targetSdkVersion = 34
    buildToolsVersion = "34.0.0"
}

buildscript {
    FileExtensions.ifExists("${project.projectDir}/bootstrap.internal.gradle") {
        apply from: it
    }

    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
    }

    dependencies {
        classpath libs.agp.gradle
        classpath libs.appmetrica.plugin
        classpath libs.nexusPublishPlugin
        classpath libs.dokka
        classpath libs.kotlin.allopen
        classpath libs.kotlin.gradle.plugin
        classpath libs.kotlin.serialization.plugin
        classpath libs.kotlin.binaryCompatibilityValidator
    }
}

apply plugin: "org.jetbrains.kotlinx.binary-compatibility-validator"

allprojects {
    repositories {
        google()
        mavenCentral()
    }

    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                if (details.requested.group == "com.christophsturm" &&  details.requested.name == "filepeek") {
                    details.useVersion "0.1.3"
                }
            }
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            freeCompilerArgs = [
                    "-Xjvm-default=all",
                    "-opt-in=com.yandex.div.data.DivModelInternalApi",
                    "-opt-in=com.yandex.yatagan.ConditionsApi",
                    "-opt-in=com.yandex.div.core.annotations.InternalApi",
                    "-opt-in=com.yandex.div.core.annotations.ExperimentalApi"
            ]
            languageVersion = "1.5"
            apiVersion = "1.5"
            jvmTarget = "1.8"
        }
    }
}

subprojects {
    tasks.withType(Test) {
        // Do not use parallel forks, because profit from parallel execution is eaten by Robolectric initialization in every test process
        maxParallelForks = 1
        maxHeapSize = "4g"
    }

    configurations.all {
        exclude group: "com.intellij", module: "annotations"
    }

    afterEvaluate {
        if (plugins.hasPlugin("jacoco")) {
            project.tasks.named("jacocoTestReport") { task ->
                unitTests.dependsOn(task)
            }
        }

        project.tasks.withType(PublishToMavenRepository) { task ->
            task.finalizedBy(reportBuildNumber)
        }

        project.tasks.withType(PublishToMavenLocal) { task ->
            task.finalizedBy(reportVersion)
        }
    }
}

wrapper {
    gradleVersion "8.3"
    distributionType = Wrapper.DistributionType.ALL
    distributionUrl "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

apiValidation {
    ignoredProjects += [
        "api-generator-test",
        "divkit-demo-app",
        "divkit-perftests",
        "divkit-regression-testing",
        "sample",
        "screenshot-test-runtime",
        "ui-test-common",
        "unit-test-common"
    ]
    ignoredPackages += ["com.yandex.div.internal"]
    nonPublicMarkers += [
            "com.yandex.yatagan.internal.YataganGenerated",
            "com.yandex.div.core.annotations.ExperimentalApi"
    ]
}

task reportVersion {
    doLast {
        println "DivKit version ${divkitVersion.releaseLibraryVersion}"
    }
}

task reportBuildNumber {
    doLast {
        println "buildNumber ${divkitVersion.releaseLibraryVersion}"
    }
}

task assembleDemoDebug {
    dependsOn ":divkit-demo-app:assembleDebug"
}

task assembleDemoDebugBundle {
    dependsOn ":divkit-demo-app:bundleDebug"
}

task assembleDemoRelease {
    dependsOn ":divkit-demo-app:assembleRelease"
}

task assembleDemoReleaseBundle {
    dependsOn ":divkit-demo-app:bundleRelease"
}

task unitTests

task finalVerification {
    dependsOn unitTests
}

FileExtensions.ifExists("${project.projectDir}/build.internal.gradle") {
    apply from: it
}
