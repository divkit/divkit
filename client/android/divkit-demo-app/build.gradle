import com.yandex.div.gradle.FileExtensions
import org.json.JSONObject

apply from: "${project.projectDir}/../div-application.gradle"
apply from: "${project.projectDir}/../div-tests.gradle"
apply from: "ui-tests.gradle"

apply plugin: 'kotlin-parcelize'
apply plugin: 'com.yandex.test.screenshot-test-plugin'

repositories {
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
}

android {
    buildFeatures {
        buildConfig = true
        viewBinding = true
    }

    defaultConfig {
        versionCode divkitVersion.versionCode + divkitVersion.buildNumber
        buildConfigField "int", "BUILD_NUMBER", "${divkitVersion.buildNumber}"
        buildConfigField "String", "ADS_BLOCK_ID", JSONObject.quote(property('mobileAds.blockId'))
        buildConfigField "String", "METRICA_API_KEY", JSONObject.quote(project.findProperty("metricaApiKey") ?: "")
        buildConfigField "boolean", "THROW_ASSERTS", project.hasProperty("screenshot-tests")? "false" : "true"
        buildConfigField "String", "HTTP_HEADERS", JSONObject.quote(project.findProperty("httpHeaders") ?: "{}")

        testInstrumentationRunner "com.yandex.test.runner.AllureAwareAndroidRunner"
        if (!project.hasProperty("include-regression-tests")) {
            testInstrumentationRunnerArguments.notAnnotation = "com.yandex.alicekit.uitests.annotations.Regression"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    sourceSets {
        main {
            assets.srcDirs += "../../../test_data/"
        }

        debug {
            java.srcDirs = ['src/public/java']
        }

        release {
            java.srcDirs = ['src/public/java']
        }

        test {
            resources.srcDirs += 'src/main/assets' // needed to access assets in unit tests.
        }

        androidTest {
            java.srcDirs += 'src/screenshotTest/java'
        }
    }
}

afterEvaluate {
    println(android.sourceSets.main.java.srcDirs)
}

configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            if (details.requested.group == 'androidx.lifecycle') {
                details.useVersion versions.androidx.lifecycle
            }
        }
    }
}

dependencies {
    implementation project(path: ':assertion')
    implementation project(path: ':div')
    implementation project(path: ':div-json')
    implementation project(path: ':div-lottie')
    implementation project(path: ':div-pinch-to-zoom')
    implementation project(path: ':div-rive')
    implementation project(path: ':div-shimmer')
    implementation project(path: ':div-size-provider')
    implementation project(path: ':divkit-regression-testing')
    implementation project(path: ':fonts')
    implementation project(path: ':logging')
    implementation project(path: ':screenshot-test-runtime')
    implementation project(path: ':ui-test-common')
    implementation project(path: ':utils')
    implementation project(path: ':video-custom')
    implementation project(path: ':div-storage')
    implementation project(path: ':div-video')

    implementation "androidx.browser:browser:$versions.androidx.browser"
    implementation "androidx.constraintlayout:constraintlayout:$versions.androidx.constraint"
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation "androidx.work:work-runtime-ktx:$versions.androidx.work"
    implementation "androidx.work:work-runtime:$versions.androidx.work"

    implementation "javax.inject:javax.inject:$versions.javax"

    implementation "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin"

    implementation "com.squareup.okhttp3:okhttp:$versions.okhttp"
    implementation "com.squareup.picasso:picasso:$versions.picasso"

    implementation "com.yandex.android:mobmetricalib:$versions.metrica"

    implementation "com.facebook.stetho:stetho:$versions.stetho"
    implementation "com.facebook.stetho:stetho-okhttp3:$versions.stetho"

    implementation "com.neovisionaries:nv-websocket-client:2.14"
    implementation "androidx.test.uiautomator:uiautomator:$versions.androidx.uiautomator"

    // QR code stuff
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0@aar'
    implementation 'com.google.zxing:core:3.4.1'

    androidTestImplementation "org.hamcrest:hamcrest-library:$versions.hamcrestCore"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"
    androidTestImplementation "androidx.lifecycle:lifecycle-viewmodel:$versions.androidx.lifecycle"
    androidTestImplementation "androidx.viewpager2:viewpager2:$versions.androidx.viewpager2"
}

screenshotTests {
    enabled = project.hasProperty("screenshot-tests")
    enableComparison = !project.hasProperty("disable-screenshot-comparison")
    strictComparison = project.hasProperty("screenshot-strict-comparison")
    testAnnotations = ["com.yandex.test.screenshot.Screenshot"]
    deviceDir = "${android.defaultConfig.applicationId}/screenshots"
    referencesDir = "${project.projectDir}/src/screenshotTest/screenshots"
}

android.applicationVariants.all { variant ->

    variant.outputs.all {
        boolean isPerf = variant.baseName.contains("perf")

        if (!isPerf) {
            outputFileName = divkitVersion.buildNumber != 0 ?
                    "${project.archivesBaseName}-v${versionName}-b${divkitVersion.buildNumber}-${variant.baseName}.apk" :
                    "${project.archivesBaseName}-v${versionName}-${variant.baseName}.apk"
        }
    }
}

FileExtensions.ifExists("${project.projectDir}/build.internal.gradle") {
    apply from: it
}
