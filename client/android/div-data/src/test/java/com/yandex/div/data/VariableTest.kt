package com.yandex.div.data

import android.net.Uri
import org.json.JSONArray
import org.json.JSONObject
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.robolectric.RobolectricTestRunner
import kotlin.random.Random
import kotlin.reflect.KClass

private const val VARIABLE_NAME_1 = "variable#1"

/**
 * Tests for [Variable].
 */
@RunWith(RobolectricTestRunner::class)
class VariableTest {

    @Test
    fun `all types of variables generated by test function`() {
        val types = mutableListOf<KClass<out Variable>>()
        Variable::class.sealedSubclasses.forEach {
            types.add(it)
        }
        generateAllTypesOfRandomVariables().forEach {
            types.remove(it::class)
        }

        Assert.assertTrue(
            """
                All types should be provided by `generateAllTypesOfRandomVariables()`!
                Missing support for: ${types.joinToString()}
            """.trimIndent(),
            types.isEmpty()
        )
    }

    @Test
    fun `variables of same type can change their values`() {
        val v1 = generateAllTypesOfRandomVariables()
        val v2 = generateAllTypesOfRandomVariables()
        v1.toList().forEachIndexed { index, _ ->
            val oldVariable = v1[index]
            val newVariable = v2[index]
            oldVariable.setValue(from = newVariable)
            Assert.assertEquals(newVariable.getValue(), oldVariable.getValue())
        }
    }

    @Test
    fun `variable sending change callbacks without actual change`() {
        generateAllTypesOfRandomVariables().forEach { variable ->
            variable.addObserver {
                Assert.fail("Got variable callback from $it despite no actual change happened")
            }
            variable.setValue(variable)
        }
    }

    @Test
    fun `remove observer during set value iteration does not cause error`() {
        val v = Variable.BooleanVariable(VARIABLE_NAME_1, true)
        val observers = ArrayList<(Variable) -> Unit>().apply {
            add {  }
            add { v.removeObserver(get(0)) }
            add {  }
        }
        observers.forEach { v.addObserver(it) }

        v.setValue(Variable.BooleanVariable(VARIABLE_NAME_1, false))
    }

    @Test
    fun `add observer during set value iteration does not cause error`() {
        val v = Variable.BooleanVariable(VARIABLE_NAME_1, true)
        val observers = ArrayList<(Variable) -> Unit>().apply {
            add {  }
            add { v.addObserver { } }
            add {  }
        }
        observers.forEach { v.addObserver(it) }

        v.setValue(Variable.BooleanVariable(VARIABLE_NAME_1, false))
    }

    private fun generateAllTypesOfRandomVariables(): List<Variable> {
        return setOf(
            Variable.StringVariable("string_var", Random.nextBytes(4).toString()),
            Variable.IntegerVariable("int_var", Random.nextLong()),
            Variable.DoubleVariable("double_var", Random.nextDouble()),
            Variable.BooleanVariable("boolean_var", Random.nextBoolean()),
            Variable.ColorVariable("color_var", Random.nextInt()),
            Variable.UrlVariable("url_var", Uri.parse(Random.nextBytes(4).toString())),
            Variable.DictVariable("dict_var", JSONObject().put(Random.nextBytes(4).toString(), Random.nextLong())),
            Variable.ArrayVariable("array_var", JSONArray().put(Random.nextBytes(4).toString()))
        ).toList()
    }
}
