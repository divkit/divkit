// Generated code. Do not modify.

package com.yandex.div.dsl.model

import java.net.URI
import com.fasterxml.jackson.annotation.*
import com.yandex.div.dsl.*
import com.yandex.div.dsl.context.*
import com.yandex.div.dsl.type.*
import com.yandex.div.dsl.util.*

class DivText internal constructor(
    @JsonIgnore override val accessibility: Property<DivAccessibility>?,
    @JsonIgnore val action: Property<DivAction>?,
    @JsonIgnore val actionAnimation: Property<DivAnimation>?,
    @JsonIgnore val actions: Property<List<DivAction>>?,
    @JsonIgnore override val alignmentHorizontal: Property<DivAlignmentHorizontal>?,
    @JsonIgnore override val alignmentVertical: Property<DivAlignmentVertical>?,
    @JsonIgnore override val alpha: Property<Double>?,
    @JsonIgnore val autoEllipsize: Property<BoolInt>?,
    @JsonIgnore override val background: Property<List<DivBackground>>?,
    @JsonIgnore override val border: Property<DivBorder>?,
    @JsonIgnore override val columnSpan: Property<Int>?,
    @JsonIgnore val doubletapActions: Property<List<DivAction>>?,
    @JsonIgnore val ellipsis: Property<Ellipsis>?,
    @JsonIgnore override val extensions: Property<List<DivExtension>>?,
    @JsonIgnore override val focus: Property<DivFocus>?,
    @JsonIgnore val focusedTextColor: Property<Color>?,
    @JsonIgnore val fontFamily: Property<DivFontFamily>?,
    @JsonIgnore val fontSize: Property<Int>?,
    @JsonIgnore val fontSizeUnit: Property<DivSizeUnit>?,
    @JsonIgnore val fontWeight: Property<DivFontWeight>?,
    @JsonIgnore override val height: Property<DivSize>?,
    @JsonIgnore override val id: Property<String>?,
    @JsonIgnore val images: Property<List<Image>>?,
    @JsonIgnore val letterSpacing: Property<Double>?,
    @JsonIgnore val lineHeight: Property<Int>?,
    @JsonIgnore val longtapActions: Property<List<DivAction>>?,
    @JsonIgnore override val margins: Property<DivEdgeInsets>?,
    @JsonIgnore val maxLines: Property<Int>?,
    @JsonIgnore val minHiddenLines: Property<Int>?,
    @JsonIgnore override val paddings: Property<DivEdgeInsets>?,
    @JsonIgnore val ranges: Property<List<Range>>?,
    @JsonIgnore override val rowSpan: Property<Int>?,
    @JsonIgnore val selectable: Property<BoolInt>?,
    @JsonIgnore override val selectedActions: Property<List<DivAction>>?,
    @JsonIgnore val strike: Property<DivLineStyle>?,
    @JsonIgnore val text: Property<String>?,
    @JsonIgnore val textAlignmentHorizontal: Property<DivAlignmentHorizontal>?,
    @JsonIgnore val textAlignmentVertical: Property<DivAlignmentVertical>?,
    @JsonIgnore val textColor: Property<Color>?,
    @JsonIgnore val textGradient: Property<DivTextGradient>?,
    @JsonIgnore override val tooltips: Property<List<DivTooltip>>?,
    @JsonIgnore override val transform: Property<DivTransform>?,
    @JsonIgnore override val transitionChange: Property<DivChangeTransition>?,
    @JsonIgnore override val transitionIn: Property<DivAppearanceTransition>?,
    @JsonIgnore override val transitionOut: Property<DivAppearanceTransition>?,
    @JsonIgnore override val transitionTriggers: Property<List<DivTransitionTrigger>>?,
    @JsonIgnore val truncate: Property<Truncate>?,
    @JsonIgnore val underline: Property<DivLineStyle>?,
    @JsonIgnore override val visibility: Property<DivVisibility>?,
    @JsonIgnore override val visibilityAction: Property<DivVisibilityAction>?,
    @JsonIgnore override val visibilityActions: Property<List<DivVisibilityAction>>?,
    @JsonIgnore override val width: Property<DivSize>?,
) : Div, DivBase {

    @JsonProperty("type") override val type = "text"

    @JsonAnyGetter
    internal fun properties(): Map<String, Any> {
        return propertyMapOf(
            "accessibility" to accessibility,
            "action" to action,
            "action_animation" to actionAnimation,
            "actions" to actions,
            "alignment_horizontal" to alignmentHorizontal,
            "alignment_vertical" to alignmentVertical,
            "alpha" to alpha,
            "auto_ellipsize" to autoEllipsize,
            "background" to background,
            "border" to border,
            "column_span" to columnSpan,
            "doubletap_actions" to doubletapActions,
            "ellipsis" to ellipsis,
            "extensions" to extensions,
            "focus" to focus,
            "focused_text_color" to focusedTextColor,
            "font_family" to fontFamily,
            "font_size" to fontSize,
            "font_size_unit" to fontSizeUnit,
            "font_weight" to fontWeight,
            "height" to height,
            "id" to id,
            "images" to images,
            "letter_spacing" to letterSpacing,
            "line_height" to lineHeight,
            "longtap_actions" to longtapActions,
            "margins" to margins,
            "max_lines" to maxLines,
            "min_hidden_lines" to minHiddenLines,
            "paddings" to paddings,
            "ranges" to ranges,
            "row_span" to rowSpan,
            "selectable" to selectable,
            "selected_actions" to selectedActions,
            "strike" to strike,
            "text" to text,
            "text_alignment_horizontal" to textAlignmentHorizontal,
            "text_alignment_vertical" to textAlignmentVertical,
            "text_color" to textColor,
            "text_gradient" to textGradient,
            "tooltips" to tooltips,
            "transform" to transform,
            "transition_change" to transitionChange,
            "transition_in" to transitionIn,
            "transition_out" to transitionOut,
            "transition_triggers" to transitionTriggers,
            "truncate" to truncate,
            "underline" to underline,
            "visibility" to visibility,
            "visibility_action" to visibilityAction,
            "visibility_actions" to visibilityActions,
            "width" to width,
        )
    }

    enum class Truncate(@JsonValue val value: String) {
        NONE("none"),
        START("start"),
        END("end"),
        MIDDLE("middle"),
    }

    class Ellipsis internal constructor(
        @JsonIgnore val actions: Property<List<DivAction>>?,
        @JsonIgnore val images: Property<List<Image>>?,
        @JsonIgnore val ranges: Property<List<Range>>?,
        @JsonIgnore val text: Property<String>?,
    ) {

        @JsonAnyGetter
        internal fun properties(): Map<String, Any> {
            return propertyMapOf(
                "actions" to actions,
                "images" to images,
                "ranges" to ranges,
                "text" to text,
            )
        }
    }

    class Image internal constructor(
        @JsonIgnore val height: Property<DivFixedSize>?,
        @JsonIgnore val start: Property<Int>?,
        @JsonIgnore val tintColor: Property<Color>?,
        @JsonIgnore val tintMode: Property<DivBlendMode>?,
        @JsonIgnore val url: Property<URI>?,
        @JsonIgnore val width: Property<DivFixedSize>?,
    ) {

        @JsonAnyGetter
        internal fun properties(): Map<String, Any> {
            return propertyMapOf(
                "height" to height,
                "start" to start,
                "tint_color" to tintColor,
                "tint_mode" to tintMode,
                "url" to url,
                "width" to width,
            )
        }
    }

    class Range internal constructor(
        @JsonIgnore val actions: Property<List<DivAction>>?,
        @JsonIgnore val end: Property<Int>?,
        @JsonIgnore val fontFamily: Property<DivFontFamily>?,
        @JsonIgnore val fontSize: Property<Int>?,
        @JsonIgnore val fontSizeUnit: Property<DivSizeUnit>?,
        @JsonIgnore val fontWeight: Property<DivFontWeight>?,
        @JsonIgnore val letterSpacing: Property<Double>?,
        @JsonIgnore val lineHeight: Property<Int>?,
        @JsonIgnore val start: Property<Int>?,
        @JsonIgnore val strike: Property<DivLineStyle>?,
        @JsonIgnore val textColor: Property<Color>?,
        @JsonIgnore val topOffset: Property<Int>?,
        @JsonIgnore val underline: Property<DivLineStyle>?,
    ) {

        @JsonAnyGetter
        internal fun properties(): Map<String, Any> {
            return propertyMapOf(
                "actions" to actions,
                "end" to end,
                "font_family" to fontFamily,
                "font_size" to fontSize,
                "font_size_unit" to fontSizeUnit,
                "font_weight" to fontWeight,
                "letter_spacing" to letterSpacing,
                "line_height" to lineHeight,
                "start" to start,
                "strike" to strike,
                "text_color" to textColor,
                "top_offset" to topOffset,
                "underline" to underline,
            )
        }
    }
}

fun <T> TemplateContext<T>.divText(): LiteralProperty<DivText> {
    return value(DivText(
        accessibility = null,
        action = null,
        actionAnimation = null,
        actions = null,
        alignmentHorizontal = null,
        alignmentVertical = null,
        alpha = null,
        autoEllipsize = null,
        background = null,
        border = null,
        columnSpan = null,
        doubletapActions = null,
        ellipsis = null,
        extensions = null,
        focus = null,
        focusedTextColor = null,
        fontFamily = null,
        fontSize = null,
        fontSizeUnit = null,
        fontWeight = null,
        height = null,
        id = null,
        images = null,
        letterSpacing = null,
        lineHeight = null,
        longtapActions = null,
        margins = null,
        maxLines = null,
        minHiddenLines = null,
        paddings = null,
        ranges = null,
        rowSpan = null,
        selectable = null,
        selectedActions = null,
        strike = null,
        text = null,
        textAlignmentHorizontal = null,
        textAlignmentVertical = null,
        textColor = null,
        textGradient = null,
        tooltips = null,
        transform = null,
        transitionChange = null,
        transitionIn = null,
        transitionOut = null,
        transitionTriggers = null,
        truncate = null,
        underline = null,
        visibility = null,
        visibilityAction = null,
        visibilityActions = null,
        width = null,
    ))
}

fun <T> TemplateContext<T>.divText(
    text: Property<String>? = null,
    accessibility: Property<DivAccessibility>? = null,
    action: Property<DivAction>? = null,
    actionAnimation: Property<DivAnimation>? = null,
    actions: Property<List<DivAction>>? = null,
    alignmentHorizontal: Property<DivAlignmentHorizontal>? = null,
    alignmentVertical: Property<DivAlignmentVertical>? = null,
    alpha: Property<Double>? = null,
    autoEllipsize: Property<BoolInt>? = null,
    background: Property<List<DivBackground>>? = null,
    border: Property<DivBorder>? = null,
    columnSpan: Property<Int>? = null,
    doubletapActions: Property<List<DivAction>>? = null,
    ellipsis: Property<DivText.Ellipsis>? = null,
    extensions: Property<List<DivExtension>>? = null,
    focus: Property<DivFocus>? = null,
    focusedTextColor: Property<Color>? = null,
    fontFamily: Property<DivFontFamily>? = null,
    fontSize: Property<Int>? = null,
    fontSizeUnit: Property<DivSizeUnit>? = null,
    fontWeight: Property<DivFontWeight>? = null,
    height: Property<DivSize>? = null,
    id: Property<String>? = null,
    images: Property<List<DivText.Image>>? = null,
    letterSpacing: Property<Double>? = null,
    lineHeight: Property<Int>? = null,
    longtapActions: Property<List<DivAction>>? = null,
    margins: Property<DivEdgeInsets>? = null,
    maxLines: Property<Int>? = null,
    minHiddenLines: Property<Int>? = null,
    paddings: Property<DivEdgeInsets>? = null,
    ranges: Property<List<DivText.Range>>? = null,
    rowSpan: Property<Int>? = null,
    selectable: Property<BoolInt>? = null,
    selectedActions: Property<List<DivAction>>? = null,
    strike: Property<DivLineStyle>? = null,
    textAlignmentHorizontal: Property<DivAlignmentHorizontal>? = null,
    textAlignmentVertical: Property<DivAlignmentVertical>? = null,
    textColor: Property<Color>? = null,
    textGradient: Property<DivTextGradient>? = null,
    tooltips: Property<List<DivTooltip>>? = null,
    transform: Property<DivTransform>? = null,
    transitionChange: Property<DivChangeTransition>? = null,
    transitionIn: Property<DivAppearanceTransition>? = null,
    transitionOut: Property<DivAppearanceTransition>? = null,
    transitionTriggers: Property<List<DivTransitionTrigger>>? = null,
    truncate: Property<DivText.Truncate>? = null,
    underline: Property<DivLineStyle>? = null,
    visibility: Property<DivVisibility>? = null,
    visibilityAction: Property<DivVisibilityAction>? = null,
    visibilityActions: Property<List<DivVisibilityAction>>? = null,
    width: Property<DivSize>? = null,
): LiteralProperty<DivText> {
    return value(DivText(
        accessibility = accessibility,
        action = action,
        actionAnimation = actionAnimation,
        actions = actions,
        alignmentHorizontal = alignmentHorizontal,
        alignmentVertical = alignmentVertical,
        alpha = alpha,
        autoEllipsize = autoEllipsize,
        background = background,
        border = border,
        columnSpan = columnSpan,
        doubletapActions = doubletapActions,
        ellipsis = ellipsis,
        extensions = extensions,
        focus = focus,
        focusedTextColor = focusedTextColor,
        fontFamily = fontFamily,
        fontSize = fontSize,
        fontSizeUnit = fontSizeUnit,
        fontWeight = fontWeight,
        height = height,
        id = id,
        images = images,
        letterSpacing = letterSpacing,
        lineHeight = lineHeight,
        longtapActions = longtapActions,
        margins = margins,
        maxLines = maxLines,
        minHiddenLines = minHiddenLines,
        paddings = paddings,
        ranges = ranges,
        rowSpan = rowSpan,
        selectable = selectable,
        selectedActions = selectedActions,
        strike = strike,
        text = text,
        textAlignmentHorizontal = textAlignmentHorizontal,
        textAlignmentVertical = textAlignmentVertical,
        textColor = textColor,
        textGradient = textGradient,
        tooltips = tooltips,
        transform = transform,
        transitionChange = transitionChange,
        transitionIn = transitionIn,
        transitionOut = transitionOut,
        transitionTriggers = transitionTriggers,
        truncate = truncate,
        underline = underline,
        visibility = visibility,
        visibilityAction = visibilityAction,
        visibilityActions = visibilityActions,
        width = width,
    ))
}

fun <T> TemplateContext<T>.divText(
    text: String? = null,
    accessibility: DivAccessibility? = null,
    action: DivAction? = null,
    actionAnimation: DivAnimation? = null,
    actions: List<DivAction>? = null,
    alignmentHorizontal: DivAlignmentHorizontal? = null,
    alignmentVertical: DivAlignmentVertical? = null,
    alpha: Double? = null,
    autoEllipsize: BoolInt? = null,
    background: List<DivBackground>? = null,
    border: DivBorder? = null,
    columnSpan: Int? = null,
    doubletapActions: List<DivAction>? = null,
    ellipsis: DivText.Ellipsis? = null,
    extensions: List<DivExtension>? = null,
    focus: DivFocus? = null,
    focusedTextColor: Color? = null,
    fontFamily: DivFontFamily? = null,
    fontSize: Int? = null,
    fontSizeUnit: DivSizeUnit? = null,
    fontWeight: DivFontWeight? = null,
    height: DivSize? = null,
    id: String? = null,
    images: List<DivText.Image>? = null,
    letterSpacing: Double? = null,
    lineHeight: Int? = null,
    longtapActions: List<DivAction>? = null,
    margins: DivEdgeInsets? = null,
    maxLines: Int? = null,
    minHiddenLines: Int? = null,
    paddings: DivEdgeInsets? = null,
    ranges: List<DivText.Range>? = null,
    rowSpan: Int? = null,
    selectable: BoolInt? = null,
    selectedActions: List<DivAction>? = null,
    strike: DivLineStyle? = null,
    textAlignmentHorizontal: DivAlignmentHorizontal? = null,
    textAlignmentVertical: DivAlignmentVertical? = null,
    textColor: Color? = null,
    textGradient: DivTextGradient? = null,
    tooltips: List<DivTooltip>? = null,
    transform: DivTransform? = null,
    transitionChange: DivChangeTransition? = null,
    transitionIn: DivAppearanceTransition? = null,
    transitionOut: DivAppearanceTransition? = null,
    transitionTriggers: List<DivTransitionTrigger>? = null,
    truncate: DivText.Truncate? = null,
    underline: DivLineStyle? = null,
    visibility: DivVisibility? = null,
    visibilityAction: DivVisibilityAction? = null,
    visibilityActions: List<DivVisibilityAction>? = null,
    width: DivSize? = null,
): LiteralProperty<DivText> {
    return value(DivText(
        accessibility = optionalValue(accessibility),
        action = optionalValue(action),
        actionAnimation = optionalValue(actionAnimation),
        actions = optionalValue(actions),
        alignmentHorizontal = optionalValue(alignmentHorizontal),
        alignmentVertical = optionalValue(alignmentVertical),
        alpha = optionalValue(alpha),
        autoEllipsize = optionalValue(autoEllipsize),
        background = optionalValue(background),
        border = optionalValue(border),
        columnSpan = optionalValue(columnSpan),
        doubletapActions = optionalValue(doubletapActions),
        ellipsis = optionalValue(ellipsis),
        extensions = optionalValue(extensions),
        focus = optionalValue(focus),
        focusedTextColor = optionalValue(focusedTextColor),
        fontFamily = optionalValue(fontFamily),
        fontSize = optionalValue(fontSize),
        fontSizeUnit = optionalValue(fontSizeUnit),
        fontWeight = optionalValue(fontWeight),
        height = optionalValue(height),
        id = optionalValue(id),
        images = optionalValue(images),
        letterSpacing = optionalValue(letterSpacing),
        lineHeight = optionalValue(lineHeight),
        longtapActions = optionalValue(longtapActions),
        margins = optionalValue(margins),
        maxLines = optionalValue(maxLines),
        minHiddenLines = optionalValue(minHiddenLines),
        paddings = optionalValue(paddings),
        ranges = optionalValue(ranges),
        rowSpan = optionalValue(rowSpan),
        selectable = optionalValue(selectable),
        selectedActions = optionalValue(selectedActions),
        strike = optionalValue(strike),
        text = optionalValue(text),
        textAlignmentHorizontal = optionalValue(textAlignmentHorizontal),
        textAlignmentVertical = optionalValue(textAlignmentVertical),
        textColor = optionalValue(textColor),
        textGradient = optionalValue(textGradient),
        tooltips = optionalValue(tooltips),
        transform = optionalValue(transform),
        transitionChange = optionalValue(transitionChange),
        transitionIn = optionalValue(transitionIn),
        transitionOut = optionalValue(transitionOut),
        transitionTriggers = optionalValue(transitionTriggers),
        truncate = optionalValue(truncate),
        underline = optionalValue(underline),
        visibility = optionalValue(visibility),
        visibilityAction = optionalValue(visibilityAction),
        visibilityActions = optionalValue(visibilityActions),
        width = optionalValue(width),
    ))
}

fun <T> TemplateContext<T>.ellipsis(): LiteralProperty<DivText.Ellipsis> {
    return value(DivText.Ellipsis(
        actions = null,
        images = null,
        ranges = null,
        text = null,
    ))
}

fun <T> TemplateContext<T>.ellipsis(
    text: Property<String>? = null,
    actions: Property<List<DivAction>>? = null,
    images: Property<List<DivText.Image>>? = null,
    ranges: Property<List<DivText.Range>>? = null,
): LiteralProperty<DivText.Ellipsis> {
    return value(DivText.Ellipsis(
        actions = actions,
        images = images,
        ranges = ranges,
        text = text,
    ))
}

fun <T> TemplateContext<T>.ellipsis(
    text: String? = null,
    actions: List<DivAction>? = null,
    images: List<DivText.Image>? = null,
    ranges: List<DivText.Range>? = null,
): LiteralProperty<DivText.Ellipsis> {
    return value(DivText.Ellipsis(
        actions = optionalValue(actions),
        images = optionalValue(images),
        ranges = optionalValue(ranges),
        text = optionalValue(text),
    ))
}

fun <T> TemplateContext<T>.image(): LiteralProperty<DivText.Image> {
    return value(DivText.Image(
        height = null,
        start = null,
        tintColor = null,
        tintMode = null,
        url = null,
        width = null,
    ))
}

fun <T> TemplateContext<T>.image(
    start: Property<Int>? = null,
    url: Property<URI>? = null,
    height: Property<DivFixedSize>? = null,
    tintColor: Property<Color>? = null,
    tintMode: Property<DivBlendMode>? = null,
    width: Property<DivFixedSize>? = null,
): LiteralProperty<DivText.Image> {
    return value(DivText.Image(
        height = height,
        start = start,
        tintColor = tintColor,
        tintMode = tintMode,
        url = url,
        width = width,
    ))
}

fun <T> TemplateContext<T>.image(
    start: Int? = null,
    url: URI? = null,
    height: DivFixedSize? = null,
    tintColor: Color? = null,
    tintMode: DivBlendMode? = null,
    width: DivFixedSize? = null,
): LiteralProperty<DivText.Image> {
    return value(DivText.Image(
        height = optionalValue(height),
        start = optionalValue(start),
        tintColor = optionalValue(tintColor),
        tintMode = optionalValue(tintMode),
        url = optionalValue(url),
        width = optionalValue(width),
    ))
}

fun <T> TemplateContext<T>.range(): LiteralProperty<DivText.Range> {
    return value(DivText.Range(
        actions = null,
        end = null,
        fontFamily = null,
        fontSize = null,
        fontSizeUnit = null,
        fontWeight = null,
        letterSpacing = null,
        lineHeight = null,
        start = null,
        strike = null,
        textColor = null,
        topOffset = null,
        underline = null,
    ))
}

fun <T> TemplateContext<T>.range(
    end: Property<Int>? = null,
    start: Property<Int>? = null,
    actions: Property<List<DivAction>>? = null,
    fontFamily: Property<DivFontFamily>? = null,
    fontSize: Property<Int>? = null,
    fontSizeUnit: Property<DivSizeUnit>? = null,
    fontWeight: Property<DivFontWeight>? = null,
    letterSpacing: Property<Double>? = null,
    lineHeight: Property<Int>? = null,
    strike: Property<DivLineStyle>? = null,
    textColor: Property<Color>? = null,
    topOffset: Property<Int>? = null,
    underline: Property<DivLineStyle>? = null,
): LiteralProperty<DivText.Range> {
    return value(DivText.Range(
        actions = actions,
        end = end,
        fontFamily = fontFamily,
        fontSize = fontSize,
        fontSizeUnit = fontSizeUnit,
        fontWeight = fontWeight,
        letterSpacing = letterSpacing,
        lineHeight = lineHeight,
        start = start,
        strike = strike,
        textColor = textColor,
        topOffset = topOffset,
        underline = underline,
    ))
}

fun <T> TemplateContext<T>.range(
    end: Int? = null,
    start: Int? = null,
    actions: List<DivAction>? = null,
    fontFamily: DivFontFamily? = null,
    fontSize: Int? = null,
    fontSizeUnit: DivSizeUnit? = null,
    fontWeight: DivFontWeight? = null,
    letterSpacing: Double? = null,
    lineHeight: Int? = null,
    strike: DivLineStyle? = null,
    textColor: Color? = null,
    topOffset: Int? = null,
    underline: DivLineStyle? = null,
): LiteralProperty<DivText.Range> {
    return value(DivText.Range(
        actions = optionalValue(actions),
        end = optionalValue(end),
        fontFamily = optionalValue(fontFamily),
        fontSize = optionalValue(fontSize),
        fontSizeUnit = optionalValue(fontSizeUnit),
        fontWeight = optionalValue(fontWeight),
        letterSpacing = optionalValue(letterSpacing),
        lineHeight = optionalValue(lineHeight),
        start = optionalValue(start),
        strike = optionalValue(strike),
        textColor = optionalValue(textColor),
        topOffset = optionalValue(topOffset),
        underline = optionalValue(underline),
    ))
}

fun CardContext.divText(
    text: ValueProperty<String>,
    accessibility: ValueProperty<DivAccessibility>? = null,
    action: ValueProperty<DivAction>? = null,
    actionAnimation: ValueProperty<DivAnimation>? = null,
    actions: ValueProperty<List<DivAction>>? = null,
    alignmentHorizontal: ValueProperty<DivAlignmentHorizontal>? = null,
    alignmentVertical: ValueProperty<DivAlignmentVertical>? = null,
    alpha: ValueProperty<Double>? = null,
    autoEllipsize: ValueProperty<BoolInt>? = null,
    background: ValueProperty<List<DivBackground>>? = null,
    border: ValueProperty<DivBorder>? = null,
    columnSpan: ValueProperty<Int>? = null,
    doubletapActions: ValueProperty<List<DivAction>>? = null,
    ellipsis: ValueProperty<DivText.Ellipsis>? = null,
    extensions: ValueProperty<List<DivExtension>>? = null,
    focus: ValueProperty<DivFocus>? = null,
    focusedTextColor: ValueProperty<Color>? = null,
    fontFamily: ValueProperty<DivFontFamily>? = null,
    fontSize: ValueProperty<Int>? = null,
    fontSizeUnit: ValueProperty<DivSizeUnit>? = null,
    fontWeight: ValueProperty<DivFontWeight>? = null,
    height: ValueProperty<DivSize>? = null,
    id: ValueProperty<String>? = null,
    images: ValueProperty<List<DivText.Image>>? = null,
    letterSpacing: ValueProperty<Double>? = null,
    lineHeight: ValueProperty<Int>? = null,
    longtapActions: ValueProperty<List<DivAction>>? = null,
    margins: ValueProperty<DivEdgeInsets>? = null,
    maxLines: ValueProperty<Int>? = null,
    minHiddenLines: ValueProperty<Int>? = null,
    paddings: ValueProperty<DivEdgeInsets>? = null,
    ranges: ValueProperty<List<DivText.Range>>? = null,
    rowSpan: ValueProperty<Int>? = null,
    selectable: ValueProperty<BoolInt>? = null,
    selectedActions: ValueProperty<List<DivAction>>? = null,
    strike: ValueProperty<DivLineStyle>? = null,
    textAlignmentHorizontal: ValueProperty<DivAlignmentHorizontal>? = null,
    textAlignmentVertical: ValueProperty<DivAlignmentVertical>? = null,
    textColor: ValueProperty<Color>? = null,
    textGradient: ValueProperty<DivTextGradient>? = null,
    tooltips: ValueProperty<List<DivTooltip>>? = null,
    transform: ValueProperty<DivTransform>? = null,
    transitionChange: ValueProperty<DivChangeTransition>? = null,
    transitionIn: ValueProperty<DivAppearanceTransition>? = null,
    transitionOut: ValueProperty<DivAppearanceTransition>? = null,
    transitionTriggers: ValueProperty<List<DivTransitionTrigger>>? = null,
    truncate: ValueProperty<DivText.Truncate>? = null,
    underline: ValueProperty<DivLineStyle>? = null,
    visibility: ValueProperty<DivVisibility>? = null,
    visibilityAction: ValueProperty<DivVisibilityAction>? = null,
    visibilityActions: ValueProperty<List<DivVisibilityAction>>? = null,
    width: ValueProperty<DivSize>? = null,
): DivText {
    return DivText(
        accessibility = accessibility,
        action = action,
        actionAnimation = actionAnimation,
        actions = actions,
        alignmentHorizontal = alignmentHorizontal,
        alignmentVertical = alignmentVertical,
        alpha = alpha,
        autoEllipsize = autoEllipsize,
        background = background,
        border = border,
        columnSpan = columnSpan,
        doubletapActions = doubletapActions,
        ellipsis = ellipsis,
        extensions = extensions,
        focus = focus,
        focusedTextColor = focusedTextColor,
        fontFamily = fontFamily,
        fontSize = fontSize,
        fontSizeUnit = fontSizeUnit,
        fontWeight = fontWeight,
        height = height,
        id = id,
        images = images,
        letterSpacing = letterSpacing,
        lineHeight = lineHeight,
        longtapActions = longtapActions,
        margins = margins,
        maxLines = maxLines,
        minHiddenLines = minHiddenLines,
        paddings = paddings,
        ranges = ranges,
        rowSpan = rowSpan,
        selectable = selectable,
        selectedActions = selectedActions,
        strike = strike,
        text = text,
        textAlignmentHorizontal = textAlignmentHorizontal,
        textAlignmentVertical = textAlignmentVertical,
        textColor = textColor,
        textGradient = textGradient,
        tooltips = tooltips,
        transform = transform,
        transitionChange = transitionChange,
        transitionIn = transitionIn,
        transitionOut = transitionOut,
        transitionTriggers = transitionTriggers,
        truncate = truncate,
        underline = underline,
        visibility = visibility,
        visibilityAction = visibilityAction,
        visibilityActions = visibilityActions,
        width = width,
    )
}

fun CardContext.divText(
    text: String,
    accessibility: DivAccessibility? = null,
    action: DivAction? = null,
    actionAnimation: DivAnimation? = null,
    actions: List<DivAction>? = null,
    alignmentHorizontal: DivAlignmentHorizontal? = null,
    alignmentVertical: DivAlignmentVertical? = null,
    alpha: Double? = null,
    autoEllipsize: BoolInt? = null,
    background: List<DivBackground>? = null,
    border: DivBorder? = null,
    columnSpan: Int? = null,
    doubletapActions: List<DivAction>? = null,
    ellipsis: DivText.Ellipsis? = null,
    extensions: List<DivExtension>? = null,
    focus: DivFocus? = null,
    focusedTextColor: Color? = null,
    fontFamily: DivFontFamily? = null,
    fontSize: Int? = null,
    fontSizeUnit: DivSizeUnit? = null,
    fontWeight: DivFontWeight? = null,
    height: DivSize? = null,
    id: String? = null,
    images: List<DivText.Image>? = null,
    letterSpacing: Double? = null,
    lineHeight: Int? = null,
    longtapActions: List<DivAction>? = null,
    margins: DivEdgeInsets? = null,
    maxLines: Int? = null,
    minHiddenLines: Int? = null,
    paddings: DivEdgeInsets? = null,
    ranges: List<DivText.Range>? = null,
    rowSpan: Int? = null,
    selectable: BoolInt? = null,
    selectedActions: List<DivAction>? = null,
    strike: DivLineStyle? = null,
    textAlignmentHorizontal: DivAlignmentHorizontal? = null,
    textAlignmentVertical: DivAlignmentVertical? = null,
    textColor: Color? = null,
    textGradient: DivTextGradient? = null,
    tooltips: List<DivTooltip>? = null,
    transform: DivTransform? = null,
    transitionChange: DivChangeTransition? = null,
    transitionIn: DivAppearanceTransition? = null,
    transitionOut: DivAppearanceTransition? = null,
    transitionTriggers: List<DivTransitionTrigger>? = null,
    truncate: DivText.Truncate? = null,
    underline: DivLineStyle? = null,
    visibility: DivVisibility? = null,
    visibilityAction: DivVisibilityAction? = null,
    visibilityActions: List<DivVisibilityAction>? = null,
    width: DivSize? = null,
): DivText {
    return DivText(
        accessibility = optionalValue(accessibility),
        action = optionalValue(action),
        actionAnimation = optionalValue(actionAnimation),
        actions = optionalValue(actions),
        alignmentHorizontal = optionalValue(alignmentHorizontal),
        alignmentVertical = optionalValue(alignmentVertical),
        alpha = optionalValue(alpha),
        autoEllipsize = optionalValue(autoEllipsize),
        background = optionalValue(background),
        border = optionalValue(border),
        columnSpan = optionalValue(columnSpan),
        doubletapActions = optionalValue(doubletapActions),
        ellipsis = optionalValue(ellipsis),
        extensions = optionalValue(extensions),
        focus = optionalValue(focus),
        focusedTextColor = optionalValue(focusedTextColor),
        fontFamily = optionalValue(fontFamily),
        fontSize = optionalValue(fontSize),
        fontSizeUnit = optionalValue(fontSizeUnit),
        fontWeight = optionalValue(fontWeight),
        height = optionalValue(height),
        id = optionalValue(id),
        images = optionalValue(images),
        letterSpacing = optionalValue(letterSpacing),
        lineHeight = optionalValue(lineHeight),
        longtapActions = optionalValue(longtapActions),
        margins = optionalValue(margins),
        maxLines = optionalValue(maxLines),
        minHiddenLines = optionalValue(minHiddenLines),
        paddings = optionalValue(paddings),
        ranges = optionalValue(ranges),
        rowSpan = optionalValue(rowSpan),
        selectable = optionalValue(selectable),
        selectedActions = optionalValue(selectedActions),
        strike = optionalValue(strike),
        text = value(text),
        textAlignmentHorizontal = optionalValue(textAlignmentHorizontal),
        textAlignmentVertical = optionalValue(textAlignmentVertical),
        textColor = optionalValue(textColor),
        textGradient = optionalValue(textGradient),
        tooltips = optionalValue(tooltips),
        transform = optionalValue(transform),
        transitionChange = optionalValue(transitionChange),
        transitionIn = optionalValue(transitionIn),
        transitionOut = optionalValue(transitionOut),
        transitionTriggers = optionalValue(transitionTriggers),
        truncate = optionalValue(truncate),
        underline = optionalValue(underline),
        visibility = optionalValue(visibility),
        visibilityAction = optionalValue(visibilityAction),
        visibilityActions = optionalValue(visibilityActions),
        width = optionalValue(width),
    )
}

fun CardContext.ellipsis(
    text: ValueProperty<String>,
    actions: ValueProperty<List<DivAction>>? = null,
    images: ValueProperty<List<DivText.Image>>? = null,
    ranges: ValueProperty<List<DivText.Range>>? = null,
): DivText.Ellipsis {
    return DivText.Ellipsis(
        actions = actions,
        images = images,
        ranges = ranges,
        text = text,
    )
}

fun CardContext.ellipsis(
    text: String,
    actions: List<DivAction>? = null,
    images: List<DivText.Image>? = null,
    ranges: List<DivText.Range>? = null,
): DivText.Ellipsis {
    return DivText.Ellipsis(
        actions = optionalValue(actions),
        images = optionalValue(images),
        ranges = optionalValue(ranges),
        text = value(text),
    )
}

fun CardContext.image(
    start: ValueProperty<Int>,
    url: ValueProperty<URI>,
    height: ValueProperty<DivFixedSize>? = null,
    tintColor: ValueProperty<Color>? = null,
    tintMode: ValueProperty<DivBlendMode>? = null,
    width: ValueProperty<DivFixedSize>? = null,
): DivText.Image {
    return DivText.Image(
        height = height,
        start = start,
        tintColor = tintColor,
        tintMode = tintMode,
        url = url,
        width = width,
    )
}

fun CardContext.image(
    start: Int,
    url: URI,
    height: DivFixedSize? = null,
    tintColor: Color? = null,
    tintMode: DivBlendMode? = null,
    width: DivFixedSize? = null,
): DivText.Image {
    return DivText.Image(
        height = optionalValue(height),
        start = value(start),
        tintColor = optionalValue(tintColor),
        tintMode = optionalValue(tintMode),
        url = value(url),
        width = optionalValue(width),
    )
}

fun CardContext.range(
    end: ValueProperty<Int>,
    start: ValueProperty<Int>,
    actions: ValueProperty<List<DivAction>>? = null,
    fontFamily: ValueProperty<DivFontFamily>? = null,
    fontSize: ValueProperty<Int>? = null,
    fontSizeUnit: ValueProperty<DivSizeUnit>? = null,
    fontWeight: ValueProperty<DivFontWeight>? = null,
    letterSpacing: ValueProperty<Double>? = null,
    lineHeight: ValueProperty<Int>? = null,
    strike: ValueProperty<DivLineStyle>? = null,
    textColor: ValueProperty<Color>? = null,
    topOffset: ValueProperty<Int>? = null,
    underline: ValueProperty<DivLineStyle>? = null,
): DivText.Range {
    return DivText.Range(
        actions = actions,
        end = end,
        fontFamily = fontFamily,
        fontSize = fontSize,
        fontSizeUnit = fontSizeUnit,
        fontWeight = fontWeight,
        letterSpacing = letterSpacing,
        lineHeight = lineHeight,
        start = start,
        strike = strike,
        textColor = textColor,
        topOffset = topOffset,
        underline = underline,
    )
}

fun CardContext.range(
    end: Int,
    start: Int,
    actions: List<DivAction>? = null,
    fontFamily: DivFontFamily? = null,
    fontSize: Int? = null,
    fontSizeUnit: DivSizeUnit? = null,
    fontWeight: DivFontWeight? = null,
    letterSpacing: Double? = null,
    lineHeight: Int? = null,
    strike: DivLineStyle? = null,
    textColor: Color? = null,
    topOffset: Int? = null,
    underline: DivLineStyle? = null,
): DivText.Range {
    return DivText.Range(
        actions = optionalValue(actions),
        end = value(end),
        fontFamily = optionalValue(fontFamily),
        fontSize = optionalValue(fontSize),
        fontSizeUnit = optionalValue(fontSizeUnit),
        fontWeight = optionalValue(fontWeight),
        letterSpacing = optionalValue(letterSpacing),
        lineHeight = optionalValue(lineHeight),
        start = value(start),
        strike = optionalValue(strike),
        textColor = optionalValue(textColor),
        topOffset = optionalValue(topOffset),
        underline = optionalValue(underline),
    )
}
