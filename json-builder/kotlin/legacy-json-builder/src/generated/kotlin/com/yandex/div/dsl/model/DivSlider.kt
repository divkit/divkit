// Generated code. Do not modify.

package com.yandex.div.dsl.model

import java.net.URI
import com.fasterxml.jackson.annotation.*
import com.yandex.div.dsl.*
import com.yandex.div.dsl.context.*
import com.yandex.div.dsl.type.*
import com.yandex.div.dsl.util.*

class DivSlider internal constructor(
    @JsonIgnore override val accessibility: Property<DivAccessibility>?,
    @JsonIgnore override val alignmentHorizontal: Property<DivAlignmentHorizontal>?,
    @JsonIgnore override val alignmentVertical: Property<DivAlignmentVertical>?,
    @JsonIgnore override val alpha: Property<Double>?,
    @JsonIgnore override val background: Property<List<DivBackground>>?,
    @JsonIgnore override val border: Property<DivBorder>?,
    @JsonIgnore override val columnSpan: Property<Int>?,
    @JsonIgnore override val extensions: Property<List<DivExtension>>?,
    @JsonIgnore override val focus: Property<DivFocus>?,
    @JsonIgnore override val height: Property<DivSize>?,
    @JsonIgnore override val id: Property<String>?,
    @JsonIgnore override val margins: Property<DivEdgeInsets>?,
    @JsonIgnore val maxValue: Property<Int>?,
    @JsonIgnore val minValue: Property<Int>?,
    @JsonIgnore override val paddings: Property<DivEdgeInsets>?,
    @JsonIgnore override val rowSpan: Property<Int>?,
    @JsonIgnore val secondaryValueAccessibility: Property<DivAccessibility>?,
    @JsonIgnore override val selectedActions: Property<List<DivAction>>?,
    @JsonIgnore val thumbSecondaryStyle: Property<DivDrawable>?,
    @JsonIgnore val thumbSecondaryTextStyle: Property<TextStyle>?,
    @JsonIgnore val thumbSecondaryValueVariable: Property<String>?,
    @JsonIgnore val thumbStyle: Property<DivDrawable>?,
    @JsonIgnore val thumbTextStyle: Property<TextStyle>?,
    @JsonIgnore val thumbValueVariable: Property<String>?,
    @JsonIgnore val tickMarkActiveStyle: Property<DivDrawable>?,
    @JsonIgnore val tickMarkInactiveStyle: Property<DivDrawable>?,
    @JsonIgnore override val tooltips: Property<List<DivTooltip>>?,
    @JsonIgnore val trackActiveStyle: Property<DivDrawable>?,
    @JsonIgnore val trackInactiveStyle: Property<DivDrawable>?,
    @JsonIgnore override val transform: Property<DivTransform>?,
    @JsonIgnore override val transitionChange: Property<DivChangeTransition>?,
    @JsonIgnore override val transitionIn: Property<DivAppearanceTransition>?,
    @JsonIgnore override val transitionOut: Property<DivAppearanceTransition>?,
    @JsonIgnore override val transitionTriggers: Property<List<DivTransitionTrigger>>?,
    @JsonIgnore override val visibility: Property<DivVisibility>?,
    @JsonIgnore override val visibilityAction: Property<DivVisibilityAction>?,
    @JsonIgnore override val visibilityActions: Property<List<DivVisibilityAction>>?,
    @JsonIgnore override val width: Property<DivSize>?,
) : Div, DivBase {

    @JsonProperty("type") override val type = "slider"

    @JsonAnyGetter
    internal fun properties(): Map<String, Any> {
        return propertyMapOf(
            "accessibility" to accessibility,
            "alignment_horizontal" to alignmentHorizontal,
            "alignment_vertical" to alignmentVertical,
            "alpha" to alpha,
            "background" to background,
            "border" to border,
            "column_span" to columnSpan,
            "extensions" to extensions,
            "focus" to focus,
            "height" to height,
            "id" to id,
            "margins" to margins,
            "max_value" to maxValue,
            "min_value" to minValue,
            "paddings" to paddings,
            "row_span" to rowSpan,
            "secondary_value_accessibility" to secondaryValueAccessibility,
            "selected_actions" to selectedActions,
            "thumb_secondary_style" to thumbSecondaryStyle,
            "thumb_secondary_text_style" to thumbSecondaryTextStyle,
            "thumb_secondary_value_variable" to thumbSecondaryValueVariable,
            "thumb_style" to thumbStyle,
            "thumb_text_style" to thumbTextStyle,
            "thumb_value_variable" to thumbValueVariable,
            "tick_mark_active_style" to tickMarkActiveStyle,
            "tick_mark_inactive_style" to tickMarkInactiveStyle,
            "tooltips" to tooltips,
            "track_active_style" to trackActiveStyle,
            "track_inactive_style" to trackInactiveStyle,
            "transform" to transform,
            "transition_change" to transitionChange,
            "transition_in" to transitionIn,
            "transition_out" to transitionOut,
            "transition_triggers" to transitionTriggers,
            "visibility" to visibility,
            "visibility_action" to visibilityAction,
            "visibility_actions" to visibilityActions,
            "width" to width,
        )
    }

    class TextStyle internal constructor(
        @JsonIgnore val fontSize: Property<Int>?,
        @JsonIgnore val fontSizeUnit: Property<DivSizeUnit>?,
        @JsonIgnore val fontWeight: Property<DivFontWeight>?,
        @JsonIgnore val offset: Property<DivPoint>?,
        @JsonIgnore val textColor: Property<Color>?,
    ) {

        @JsonAnyGetter
        internal fun properties(): Map<String, Any> {
            return propertyMapOf(
                "font_size" to fontSize,
                "font_size_unit" to fontSizeUnit,
                "font_weight" to fontWeight,
                "offset" to offset,
                "text_color" to textColor,
            )
        }
    }
}

fun <T> TemplateContext<T>.divSlider(): LiteralProperty<DivSlider> {
    return value(DivSlider(
        accessibility = null,
        alignmentHorizontal = null,
        alignmentVertical = null,
        alpha = null,
        background = null,
        border = null,
        columnSpan = null,
        extensions = null,
        focus = null,
        height = null,
        id = null,
        margins = null,
        maxValue = null,
        minValue = null,
        paddings = null,
        rowSpan = null,
        secondaryValueAccessibility = null,
        selectedActions = null,
        thumbSecondaryStyle = null,
        thumbSecondaryTextStyle = null,
        thumbSecondaryValueVariable = null,
        thumbStyle = null,
        thumbTextStyle = null,
        thumbValueVariable = null,
        tickMarkActiveStyle = null,
        tickMarkInactiveStyle = null,
        tooltips = null,
        trackActiveStyle = null,
        trackInactiveStyle = null,
        transform = null,
        transitionChange = null,
        transitionIn = null,
        transitionOut = null,
        transitionTriggers = null,
        visibility = null,
        visibilityAction = null,
        visibilityActions = null,
        width = null,
    ))
}

fun <T> TemplateContext<T>.divSlider(
    thumbStyle: Property<DivDrawable>? = null,
    trackActiveStyle: Property<DivDrawable>? = null,
    trackInactiveStyle: Property<DivDrawable>? = null,
    accessibility: Property<DivAccessibility>? = null,
    alignmentHorizontal: Property<DivAlignmentHorizontal>? = null,
    alignmentVertical: Property<DivAlignmentVertical>? = null,
    alpha: Property<Double>? = null,
    background: Property<List<DivBackground>>? = null,
    border: Property<DivBorder>? = null,
    columnSpan: Property<Int>? = null,
    extensions: Property<List<DivExtension>>? = null,
    focus: Property<DivFocus>? = null,
    height: Property<DivSize>? = null,
    id: Property<String>? = null,
    margins: Property<DivEdgeInsets>? = null,
    maxValue: Property<Int>? = null,
    minValue: Property<Int>? = null,
    paddings: Property<DivEdgeInsets>? = null,
    rowSpan: Property<Int>? = null,
    secondaryValueAccessibility: Property<DivAccessibility>? = null,
    selectedActions: Property<List<DivAction>>? = null,
    thumbSecondaryStyle: Property<DivDrawable>? = null,
    thumbSecondaryTextStyle: Property<DivSlider.TextStyle>? = null,
    thumbSecondaryValueVariable: Property<String>? = null,
    thumbTextStyle: Property<DivSlider.TextStyle>? = null,
    thumbValueVariable: Property<String>? = null,
    tickMarkActiveStyle: Property<DivDrawable>? = null,
    tickMarkInactiveStyle: Property<DivDrawable>? = null,
    tooltips: Property<List<DivTooltip>>? = null,
    transform: Property<DivTransform>? = null,
    transitionChange: Property<DivChangeTransition>? = null,
    transitionIn: Property<DivAppearanceTransition>? = null,
    transitionOut: Property<DivAppearanceTransition>? = null,
    transitionTriggers: Property<List<DivTransitionTrigger>>? = null,
    visibility: Property<DivVisibility>? = null,
    visibilityAction: Property<DivVisibilityAction>? = null,
    visibilityActions: Property<List<DivVisibilityAction>>? = null,
    width: Property<DivSize>? = null,
): LiteralProperty<DivSlider> {
    return value(DivSlider(
        accessibility = accessibility,
        alignmentHorizontal = alignmentHorizontal,
        alignmentVertical = alignmentVertical,
        alpha = alpha,
        background = background,
        border = border,
        columnSpan = columnSpan,
        extensions = extensions,
        focus = focus,
        height = height,
        id = id,
        margins = margins,
        maxValue = maxValue,
        minValue = minValue,
        paddings = paddings,
        rowSpan = rowSpan,
        secondaryValueAccessibility = secondaryValueAccessibility,
        selectedActions = selectedActions,
        thumbSecondaryStyle = thumbSecondaryStyle,
        thumbSecondaryTextStyle = thumbSecondaryTextStyle,
        thumbSecondaryValueVariable = thumbSecondaryValueVariable,
        thumbStyle = thumbStyle,
        thumbTextStyle = thumbTextStyle,
        thumbValueVariable = thumbValueVariable,
        tickMarkActiveStyle = tickMarkActiveStyle,
        tickMarkInactiveStyle = tickMarkInactiveStyle,
        tooltips = tooltips,
        trackActiveStyle = trackActiveStyle,
        trackInactiveStyle = trackInactiveStyle,
        transform = transform,
        transitionChange = transitionChange,
        transitionIn = transitionIn,
        transitionOut = transitionOut,
        transitionTriggers = transitionTriggers,
        visibility = visibility,
        visibilityAction = visibilityAction,
        visibilityActions = visibilityActions,
        width = width,
    ))
}

fun <T> TemplateContext<T>.divSlider(
    thumbStyle: DivDrawable? = null,
    trackActiveStyle: DivDrawable? = null,
    trackInactiveStyle: DivDrawable? = null,
    accessibility: DivAccessibility? = null,
    alignmentHorizontal: DivAlignmentHorizontal? = null,
    alignmentVertical: DivAlignmentVertical? = null,
    alpha: Double? = null,
    background: List<DivBackground>? = null,
    border: DivBorder? = null,
    columnSpan: Int? = null,
    extensions: List<DivExtension>? = null,
    focus: DivFocus? = null,
    height: DivSize? = null,
    id: String? = null,
    margins: DivEdgeInsets? = null,
    maxValue: Int? = null,
    minValue: Int? = null,
    paddings: DivEdgeInsets? = null,
    rowSpan: Int? = null,
    secondaryValueAccessibility: DivAccessibility? = null,
    selectedActions: List<DivAction>? = null,
    thumbSecondaryStyle: DivDrawable? = null,
    thumbSecondaryTextStyle: DivSlider.TextStyle? = null,
    thumbSecondaryValueVariable: String? = null,
    thumbTextStyle: DivSlider.TextStyle? = null,
    thumbValueVariable: String? = null,
    tickMarkActiveStyle: DivDrawable? = null,
    tickMarkInactiveStyle: DivDrawable? = null,
    tooltips: List<DivTooltip>? = null,
    transform: DivTransform? = null,
    transitionChange: DivChangeTransition? = null,
    transitionIn: DivAppearanceTransition? = null,
    transitionOut: DivAppearanceTransition? = null,
    transitionTriggers: List<DivTransitionTrigger>? = null,
    visibility: DivVisibility? = null,
    visibilityAction: DivVisibilityAction? = null,
    visibilityActions: List<DivVisibilityAction>? = null,
    width: DivSize? = null,
): LiteralProperty<DivSlider> {
    return value(DivSlider(
        accessibility = optionalValue(accessibility),
        alignmentHorizontal = optionalValue(alignmentHorizontal),
        alignmentVertical = optionalValue(alignmentVertical),
        alpha = optionalValue(alpha),
        background = optionalValue(background),
        border = optionalValue(border),
        columnSpan = optionalValue(columnSpan),
        extensions = optionalValue(extensions),
        focus = optionalValue(focus),
        height = optionalValue(height),
        id = optionalValue(id),
        margins = optionalValue(margins),
        maxValue = optionalValue(maxValue),
        minValue = optionalValue(minValue),
        paddings = optionalValue(paddings),
        rowSpan = optionalValue(rowSpan),
        secondaryValueAccessibility = optionalValue(secondaryValueAccessibility),
        selectedActions = optionalValue(selectedActions),
        thumbSecondaryStyle = optionalValue(thumbSecondaryStyle),
        thumbSecondaryTextStyle = optionalValue(thumbSecondaryTextStyle),
        thumbSecondaryValueVariable = optionalValue(thumbSecondaryValueVariable),
        thumbStyle = optionalValue(thumbStyle),
        thumbTextStyle = optionalValue(thumbTextStyle),
        thumbValueVariable = optionalValue(thumbValueVariable),
        tickMarkActiveStyle = optionalValue(tickMarkActiveStyle),
        tickMarkInactiveStyle = optionalValue(tickMarkInactiveStyle),
        tooltips = optionalValue(tooltips),
        trackActiveStyle = optionalValue(trackActiveStyle),
        trackInactiveStyle = optionalValue(trackInactiveStyle),
        transform = optionalValue(transform),
        transitionChange = optionalValue(transitionChange),
        transitionIn = optionalValue(transitionIn),
        transitionOut = optionalValue(transitionOut),
        transitionTriggers = optionalValue(transitionTriggers),
        visibility = optionalValue(visibility),
        visibilityAction = optionalValue(visibilityAction),
        visibilityActions = optionalValue(visibilityActions),
        width = optionalValue(width),
    ))
}

fun <T> TemplateContext<T>.textStyle(): LiteralProperty<DivSlider.TextStyle> {
    return value(DivSlider.TextStyle(
        fontSize = null,
        fontSizeUnit = null,
        fontWeight = null,
        offset = null,
        textColor = null,
    ))
}

fun <T> TemplateContext<T>.textStyle(
    fontSize: Property<Int>? = null,
    fontSizeUnit: Property<DivSizeUnit>? = null,
    fontWeight: Property<DivFontWeight>? = null,
    offset: Property<DivPoint>? = null,
    textColor: Property<Color>? = null,
): LiteralProperty<DivSlider.TextStyle> {
    return value(DivSlider.TextStyle(
        fontSize = fontSize,
        fontSizeUnit = fontSizeUnit,
        fontWeight = fontWeight,
        offset = offset,
        textColor = textColor,
    ))
}

fun <T> TemplateContext<T>.textStyle(
    fontSize: Int? = null,
    fontSizeUnit: DivSizeUnit? = null,
    fontWeight: DivFontWeight? = null,
    offset: DivPoint? = null,
    textColor: Color? = null,
): LiteralProperty<DivSlider.TextStyle> {
    return value(DivSlider.TextStyle(
        fontSize = optionalValue(fontSize),
        fontSizeUnit = optionalValue(fontSizeUnit),
        fontWeight = optionalValue(fontWeight),
        offset = optionalValue(offset),
        textColor = optionalValue(textColor),
    ))
}

fun CardContext.divSlider(
    thumbStyle: ValueProperty<DivDrawable>,
    trackActiveStyle: ValueProperty<DivDrawable>,
    trackInactiveStyle: ValueProperty<DivDrawable>,
    accessibility: ValueProperty<DivAccessibility>? = null,
    alignmentHorizontal: ValueProperty<DivAlignmentHorizontal>? = null,
    alignmentVertical: ValueProperty<DivAlignmentVertical>? = null,
    alpha: ValueProperty<Double>? = null,
    background: ValueProperty<List<DivBackground>>? = null,
    border: ValueProperty<DivBorder>? = null,
    columnSpan: ValueProperty<Int>? = null,
    extensions: ValueProperty<List<DivExtension>>? = null,
    focus: ValueProperty<DivFocus>? = null,
    height: ValueProperty<DivSize>? = null,
    id: ValueProperty<String>? = null,
    margins: ValueProperty<DivEdgeInsets>? = null,
    maxValue: ValueProperty<Int>? = null,
    minValue: ValueProperty<Int>? = null,
    paddings: ValueProperty<DivEdgeInsets>? = null,
    rowSpan: ValueProperty<Int>? = null,
    secondaryValueAccessibility: ValueProperty<DivAccessibility>? = null,
    selectedActions: ValueProperty<List<DivAction>>? = null,
    thumbSecondaryStyle: ValueProperty<DivDrawable>? = null,
    thumbSecondaryTextStyle: ValueProperty<DivSlider.TextStyle>? = null,
    thumbSecondaryValueVariable: ValueProperty<String>? = null,
    thumbTextStyle: ValueProperty<DivSlider.TextStyle>? = null,
    thumbValueVariable: ValueProperty<String>? = null,
    tickMarkActiveStyle: ValueProperty<DivDrawable>? = null,
    tickMarkInactiveStyle: ValueProperty<DivDrawable>? = null,
    tooltips: ValueProperty<List<DivTooltip>>? = null,
    transform: ValueProperty<DivTransform>? = null,
    transitionChange: ValueProperty<DivChangeTransition>? = null,
    transitionIn: ValueProperty<DivAppearanceTransition>? = null,
    transitionOut: ValueProperty<DivAppearanceTransition>? = null,
    transitionTriggers: ValueProperty<List<DivTransitionTrigger>>? = null,
    visibility: ValueProperty<DivVisibility>? = null,
    visibilityAction: ValueProperty<DivVisibilityAction>? = null,
    visibilityActions: ValueProperty<List<DivVisibilityAction>>? = null,
    width: ValueProperty<DivSize>? = null,
): DivSlider {
    return DivSlider(
        accessibility = accessibility,
        alignmentHorizontal = alignmentHorizontal,
        alignmentVertical = alignmentVertical,
        alpha = alpha,
        background = background,
        border = border,
        columnSpan = columnSpan,
        extensions = extensions,
        focus = focus,
        height = height,
        id = id,
        margins = margins,
        maxValue = maxValue,
        minValue = minValue,
        paddings = paddings,
        rowSpan = rowSpan,
        secondaryValueAccessibility = secondaryValueAccessibility,
        selectedActions = selectedActions,
        thumbSecondaryStyle = thumbSecondaryStyle,
        thumbSecondaryTextStyle = thumbSecondaryTextStyle,
        thumbSecondaryValueVariable = thumbSecondaryValueVariable,
        thumbStyle = thumbStyle,
        thumbTextStyle = thumbTextStyle,
        thumbValueVariable = thumbValueVariable,
        tickMarkActiveStyle = tickMarkActiveStyle,
        tickMarkInactiveStyle = tickMarkInactiveStyle,
        tooltips = tooltips,
        trackActiveStyle = trackActiveStyle,
        trackInactiveStyle = trackInactiveStyle,
        transform = transform,
        transitionChange = transitionChange,
        transitionIn = transitionIn,
        transitionOut = transitionOut,
        transitionTriggers = transitionTriggers,
        visibility = visibility,
        visibilityAction = visibilityAction,
        visibilityActions = visibilityActions,
        width = width,
    )
}

fun CardContext.divSlider(
    thumbStyle: DivDrawable,
    trackActiveStyle: DivDrawable,
    trackInactiveStyle: DivDrawable,
    accessibility: DivAccessibility? = null,
    alignmentHorizontal: DivAlignmentHorizontal? = null,
    alignmentVertical: DivAlignmentVertical? = null,
    alpha: Double? = null,
    background: List<DivBackground>? = null,
    border: DivBorder? = null,
    columnSpan: Int? = null,
    extensions: List<DivExtension>? = null,
    focus: DivFocus? = null,
    height: DivSize? = null,
    id: String? = null,
    margins: DivEdgeInsets? = null,
    maxValue: Int? = null,
    minValue: Int? = null,
    paddings: DivEdgeInsets? = null,
    rowSpan: Int? = null,
    secondaryValueAccessibility: DivAccessibility? = null,
    selectedActions: List<DivAction>? = null,
    thumbSecondaryStyle: DivDrawable? = null,
    thumbSecondaryTextStyle: DivSlider.TextStyle? = null,
    thumbSecondaryValueVariable: String? = null,
    thumbTextStyle: DivSlider.TextStyle? = null,
    thumbValueVariable: String? = null,
    tickMarkActiveStyle: DivDrawable? = null,
    tickMarkInactiveStyle: DivDrawable? = null,
    tooltips: List<DivTooltip>? = null,
    transform: DivTransform? = null,
    transitionChange: DivChangeTransition? = null,
    transitionIn: DivAppearanceTransition? = null,
    transitionOut: DivAppearanceTransition? = null,
    transitionTriggers: List<DivTransitionTrigger>? = null,
    visibility: DivVisibility? = null,
    visibilityAction: DivVisibilityAction? = null,
    visibilityActions: List<DivVisibilityAction>? = null,
    width: DivSize? = null,
): DivSlider {
    return DivSlider(
        accessibility = optionalValue(accessibility),
        alignmentHorizontal = optionalValue(alignmentHorizontal),
        alignmentVertical = optionalValue(alignmentVertical),
        alpha = optionalValue(alpha),
        background = optionalValue(background),
        border = optionalValue(border),
        columnSpan = optionalValue(columnSpan),
        extensions = optionalValue(extensions),
        focus = optionalValue(focus),
        height = optionalValue(height),
        id = optionalValue(id),
        margins = optionalValue(margins),
        maxValue = optionalValue(maxValue),
        minValue = optionalValue(minValue),
        paddings = optionalValue(paddings),
        rowSpan = optionalValue(rowSpan),
        secondaryValueAccessibility = optionalValue(secondaryValueAccessibility),
        selectedActions = optionalValue(selectedActions),
        thumbSecondaryStyle = optionalValue(thumbSecondaryStyle),
        thumbSecondaryTextStyle = optionalValue(thumbSecondaryTextStyle),
        thumbSecondaryValueVariable = optionalValue(thumbSecondaryValueVariable),
        thumbStyle = value(thumbStyle),
        thumbTextStyle = optionalValue(thumbTextStyle),
        thumbValueVariable = optionalValue(thumbValueVariable),
        tickMarkActiveStyle = optionalValue(tickMarkActiveStyle),
        tickMarkInactiveStyle = optionalValue(tickMarkInactiveStyle),
        tooltips = optionalValue(tooltips),
        trackActiveStyle = value(trackActiveStyle),
        trackInactiveStyle = value(trackInactiveStyle),
        transform = optionalValue(transform),
        transitionChange = optionalValue(transitionChange),
        transitionIn = optionalValue(transitionIn),
        transitionOut = optionalValue(transitionOut),
        transitionTriggers = optionalValue(transitionTriggers),
        visibility = optionalValue(visibility),
        visibilityAction = optionalValue(visibilityAction),
        visibilityActions = optionalValue(visibilityActions),
        width = optionalValue(width),
    )
}

fun CardContext.textStyle(
    fontSize: ValueProperty<Int>,
    fontSizeUnit: ValueProperty<DivSizeUnit>? = null,
    fontWeight: ValueProperty<DivFontWeight>? = null,
    offset: ValueProperty<DivPoint>? = null,
    textColor: ValueProperty<Color>? = null,
): DivSlider.TextStyle {
    return DivSlider.TextStyle(
        fontSize = fontSize,
        fontSizeUnit = fontSizeUnit,
        fontWeight = fontWeight,
        offset = offset,
        textColor = textColor,
    )
}

fun CardContext.textStyle(
    fontSize: Int,
    fontSizeUnit: DivSizeUnit? = null,
    fontWeight: DivFontWeight? = null,
    offset: DivPoint? = null,
    textColor: Color? = null,
): DivSlider.TextStyle {
    return DivSlider.TextStyle(
        fontSize = value(fontSize),
        fontSizeUnit = optionalValue(fontSizeUnit),
        fontWeight = optionalValue(fontWeight),
        offset = optionalValue(offset),
        textColor = optionalValue(textColor),
    )
}
